# 벡터 수열 함수
# seq(from, to, by)
seq(1, 10, 3)
# 벡터 수열 함수
# seq(from, to, by)
seq(1, 11, 3)
# 벡터 수열 함수
# seq(from, to, by)
seq(1, 110, 3)
# 벡터 수열 함수
# seq(from, to, by)
seq(1, 10, 3)
x <- c(3:8)
x
x[4]
x[-4]    # 4번째 요소 제외한 모든 요소 출력
x[x>5]   # 조건문
x[5:8]
x <- c(1:3)
x*3
y <- c(3:5)
x+y
x*y
a <- matrix(c(1:4), nrow=2)
a
b <- matrix(c(1:4), nrow=2)
b
a+b
a*b
t(a)
solve(a)
a%*%b
x <- data.frame(a=c("s1", "s2", "s3"),
b=c("A", "B", "c"))
x
y <- data.frame(a=c("s5", "s6", "s7"),
b=c("E", "F", "G"))
y
rbind(x, y)
x <- data.frame(a=c("a", "b", "c"),
b=c(80, 60, 70))
x
cbind(x, d=c(1, 2, 3))
x <- data.frame(name=c("a", "b", "c"),
math=c(1, 2, 3))
y <- data.frame(name=c("c", "b", "d"),
english=c(4, 5, 6))
merge(x, y)
merge(x, y, all.x=TRUE)
merge(x, y, all=TRUE)
if( score>=90 ){
print("수")
} else if( score>=80 ){
print("우")
} else{
print("가")
}
ore = 95
if( score>=90 ){
print("수")
} else if( score>=80 ){
print("우")
} else{
print("가")
}
score = 95
if( score>=90 ){
print("수")
} else if( score>=80 ){
print("우")
} else{
print("가")
}
score = 95
ifelse( score>=60, "Pass", "Fail" )
course = "C"
swith(course,
"A"="brunch",
"B"="lunch",
"dinner")
course = "C"
switch(course,
"A"="brunch",
"B"="lunch",
"dinner")
### (1) for문 ###
for (i in 1:4) {
print(i)
}
i=i+1
i=1
while (i<=4) {
print(i)
i=i+1
}
repeat {
print(i)
if (i>=2) {
break
}
i=i+1
}
i=1
repeat {
print(i)
if (i>=2) {
break
}
i=i+1
}
break
# ① break문 #
# 반복문을 중간에 탈출하기 위해 사용하는 명령어
for (i in 1:5) {
print(i)
if (i>=2) {
break
}
}
if (i>=2) {
break
}
# ① break문 #
# 반복문을 중간에 탈출하기 위해 사용하는 명령어
for (i in 1:5) {
print(i)
if (i>=2) {
break
}
}
# ② next문 #
# 반복문에서 다음 반복으로 넘어갈 수 있도록 하는 명령어
for (i in 1:5) {
if (i==2) {
next
}
print(i)
}
func_abs = function(x) {
if (x<0) {
return(-x)
} else {
return(x)
}
}
func_abs(-10.9)
func_abs(10.1)
func_abs = function(x) {
if (x<0) {
return(-x)
} else {
return(x)
}
}
func_abs(-10.9)
func_abs(10.1)
func_diff = function(x, y) {
print(x)
print(x)
print(x-y)
}
val = func_diff(9, 1)
val
func_diff = function(x, y) {
print(x)
print(y)
print(x-y)
}
val = func_diff(9, 1)
val
##### <1> graphics 패키지 #####
length
##### <1> graphics 패키지 #####
plot(length)
a = c(3, 5, 4)
plot(a)
length <- iris$Petal.Length
plot(x=length)
length <- iris$Petal.Length
width <- iris$Petal.Width
plot(x=length,
y=width)
length <- iris$Petal.Length
width <- iris$Petal.Width
plot(length,
width,
xlab="꽃잎 길이",
ylab="꽃입 너비",
main="꽃잎 길이와 너비")
x <- c(1, 5, 2, 4, 6, 9, 11, 8, 13)
plot(x,
main="시계열 그래프 예제",
type="l")
plot(x,
main="시계열 그래프 예제",
type="b")
plot(x,
main="시계열 그래프 예제",
type="o")
plot(x,
main="시계열 그래프 예제",
type="h")
plot(x,
main="시계열 그래프 예제",
type="s")
plot(x,
main="시계열 그래프 예제",
type="S")
plot(x,
main="시계열 그래프 예제",
type="n")
plot(x,
main="시계열 그래프 예제",
type="b")
plot(x,
main="시계열 그래프 예제",
type="b")                    # p, l, b, o, h, s, S, n / default : p
length <- iris$Sepal.Length
hist(length,
xlab="꽃받침 길이",
ylab="수량",
main="꽃받침 길이 분포")
length <- iris$Sepal.Length
hist(x=length,
breaks=4,     # 계급 구간 : 4
freq=FALSE)   # 상대도수
h <- c(15, 23, 5, 20)
name <- c("1분기", "2분기", "3분기", "4분기")
barplot(h,
names.arg=name)   # names.arg : 각 막대에 사용할 문자열 벡터
h <- table(iris$Species)
h
barplot(h,
ylab="수량",
main="종별 수량")
sales <- c(15, 23, 5, 20)
seasons <- c("1분기", "2분기", "3분기", "4분기")
df <- data.frame(sales,
seasons)
df
barplot(sales~seasons, data=df)
barplot(sales~seasons, df)
barplot(sales~seasons, data=df)
df
barplot(h,
names.arg=name)   # names.arg : 각 막대에 사용할 문자열 벡터
h <- table(iris$Species)
barplot(h,
names.arg=name)   # names.arg : 각 막대에 사용할 문자열 벡터
barplot(sales~seasons, df)
p <- c(15, 23, 5, 20)
l <- c("1분기", "2분기", "3분기", "4분기")
pie(x=p,
labels=l)
p <- c(15, 23, 5, 20)
l <- c("1분기", "2분기", "3분기", "4분기")
pie(x=p,
labels=l,
density=50,     # 원그래프를 지정한 수만큼 사선을 그어서 표시
angle=30*1:4)
p <- c(15, 23, 5, 20)
l <- c("1분기", "2분기", "3분기", "4분기")
pie(x=p,
labels=l,
density=50,     # 원그래프를 지정한 수만큼 사선을 그어서 표시
angle=30*1:4)   # 첫 번째 파이 조각부터 30도씩 사선을 그을 각도를 지정
p <- c(15, 23, 5, 20)
l <- c("1분기", "2분기", "3분기", "4분기")
pie(x=p,
labels=l,
density=5,     # 원그래프를 지정한 수만큼 사선을 그어서 표시
angle=30*1:4)   # 첫 번째 파이 조각부터 30도씩 사선을 그을 각도를 지정
p <- c(15, 23, 5, 20)
l <- c("1분기", "2분기", "3분기", "4분기")
pie(x=p,
labels=l,
density=20,     # 원그래프를 지정한 수만큼 사선을 그어서 표시
angle=30*1:4)   # 첫 번째 파이 조각부터 30도씩 사선을 그을 각도를 지정
p <- c(15, 23, 5, 20)
l <- c("1분기", "2분기", "3분기", "4분기")
pie(x=p,
labels=l,
density=10,     # 원그래프를 지정한 수만큼 사선을 그어서 표시
angle=30*1:4)   # 첫 번째 파이 조각부터 30도씩 사선을 그을 각도를 지정
s <- iris$Sepal.Length
boxplot(s,
main="꽃받침 길이 분포")
boxplot(iris$Sepal.Length~
iris&Species,
notch=TRUE,   # 중위수에 대한 신뢰구간을 움푹 들어간 형태로 표시
xlab="종별",
ylab="꽃받침 길이",
main="종별 꽃받침 길이 분포")
boxplot(iris$Sepal.Length~
iris$Species,
notch=TRUE,   # 중위수에 대한 신뢰구간을 움푹 들어간 형태로 표시
xlab="종별",
ylab="꽃받침 길이",
main="종별 꽃받침 길이 분포")
# ① geom_bar 함수 #
ggplot(data,
ase(x, y),
)+geom_bar()
##### <2> ggplot 패키지 #####
# 그래픽 문법(Grammar of Graphics)에 기반한 그래프(Plot)
# ggplot2를 처음 사용할 경우 ggplot 패키지를 설치해야 함
install.packages("ggplot2")
library(ggplot2)
# ① geom_bar 함수 #
ggplot(data,
ase(x, y),
)+geom_bar()
# ① geom_bar 함수 #
ggplot(data,
ase(x, y),
)+geom_bar()
# ① geom_bar 함수 #
ggplot2(data,
ase(x, y),
)+geom_bar()
# ① geom_bar 함수 #
ggplot(data,
ase(x, y),
)+geom_bar( )
ggplot(data,
ase(x, y),
)+geom_bar( )
# ① geom_bar 함수 #
ggplot(diamonds,
ase(color),
)+geom_bar()
# ① geom_bar 함수 #
ggplot(diamonds,
aes(color),
)+geom_bar()
# ② geom_point 함수 #
ggplot(sleep,
aes(x=ID,
y=extra)
)+geom_point()
# ③ geom_line 함수 #
ggplot(Orange,
aes(age,
circumstance)
)+geom_line(aes(color=Tree))
# ③ geom_line 함수 #
ggplot(Orange,
aes(age,
circumference)
)+geom_line(aes(color=Tree))
# ④ geom_boxplot 함수 #
ggplot(data=airquality,
aes(x=Month,
y=Temp,
group=Month)
)+geom_boxplot()
# ① scan 함수 #
# scan(file, what)
scan("")
df <- read.table(
file = "data.txt",
header = TRUE
)
df
df <- read.table(
file = "data.txt",
header = TRUE
)
df
df <- read.table(
file="data.txt",
header=TRUE
)
df
# ② write.table 함수 #
# write.table(x, file, append, quote, sep, ...)
write.table(iris,
file="write.txt")
test <- read.table(
file="write.txt",
header=TRUE
)
test
csv_data <- read.csv(
file="data.txt",
header=TRUE
)
csv_data
csv_data <- read.csv(
file="data.csv",
header=TRUE
)
csv_data
remove(test)
test
test <- read.csv(
file="write.csv",
header=TRUE
)
test
test <- read.csv(
file="write.csv",
header=TRUE
)
test
write.csv(csv_data,
file="write.csv")
test <- read.csv(
file="write.csv",
header=TRUE
)
test
remove(test)
csv_data
# ④ write.csv 함수 #
# write.csv(x, file, append, quote, sep, ...)
write.csv(csv_data,
file="write.csv")
test <- read.csv(
file="write.csv",
header=TRUE
)
test
test <- read.csv(
file="write.csv",
header=TRUE,
index=FALSE
)
remove(test)
tsv_data <- read.delim(
file="data.tsv",
header=TRUE
)
tsv_data
write.table(
tsv_data,
file="write.tsv",
sep="\t"
)
test <- read.delim(
file="write.tsv",
header=TRUE
)
test
remove(test)
# ① read_excel 함수 #
excel_data <- read_excel(
path="data.xlsx",
sheet="Sheet1",
range="A1:B4",
col_names=TRUE
)
excel_data <- read_excel(
path="data.xlsx",
sheet="Sheet1",
range="A1:B4",
col_names=TRUE
)
# ① read_excel 함수 #
# read_excel(path)
# EXCEL에서 데이터 수집 기능을 처음 사용할 경우 readxl 패키지를 설치해야 함
install.packages("readxl")
library(readxl)
excel_data <- read_excel(
path="data.xlsx",
sheet="Sheet1",
range="A1:B4",
col_names=TRUE
)
View(excel_data)
View(csv_data)
write.xlsx(
excel_data,
file="write.xlsx"
)
test <- read_excel(
path="write.xlsx",
sheet="Sheet1",
range="A1:B4",
col_names=TRUE
)
test
# ② write.xlsx 함수 #
# write.xlsx(x, file, ...)
write.xlsx(
excel_data,
file="write.xlsx"
)
# ② write.xlsx 함수 #
# write.xlsx(x, file, ...)
# write.xlsx 함수는 openxlsx 패키지를 설치하고 사용해야 함
install.packages("openxlsx")
library(openxlsx)
write.xlsx(
excel_data,
file="write.xlsx"
)
test <- read_excel(
path="write.xlsx",
sheet="Sheet1",
range="A1:B4",
col_names=TRUE
)
test <- read_excel(
path="write.xlsx",
sheet="Sheet 1",
range="A1:B4",
col_names=TRUE
)
test
View(test)
remove(test)
